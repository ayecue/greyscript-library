#import CustomCrypto from crypto;
#import Collection from collection;

PasswordEntry = {}

PasswordEntry.constructor = function(key, password)
	self.key = key
	self.password = password
	
	return self
end function

PasswordEntry.toString = function()
	return [self.key, self.password].join(";")
end function

PasswordEntry.createPasswordEntryFromColumn = function(columnString)
	parsed = columnString.split(";")
	return self.constructor(parsed[0], parsed[1])
end function

PasswordFile = {}

PasswordFile.constructor = function(fs)
	user = active_user
	directory = "/home"
	passwordFileName = self.getFilename()
	
	self.fs = fs
	self.basePath = [directory, user].join("/")
	self.fullPath = [directory, user, passwordFileName].join("/")
	
	self.load()
	
	return self
end function

PasswordFile.getFilename = function()
	return "passwords"
end function

PasswordFile.load = function()
	passwordFileName = self.getFilename()
	passwordFile = self.fs.openFile(self.fullPath)
	
	if passwordFile == null then
		passwordFile = self.fs.createFile(self.basePath, passwordFileName)
	end if
	
	self.file = passwordFile
	
	return passwordFile
end function

PasswordFileManager = {}

PasswordFileManager.PasswordFile = @PasswordFile
PasswordFileManager.PasswordEntry = @PasswordEntry
PasswordFileManager.CustomCrypto = @CustomCrypto
PasswordFileManager.Collection = @Collection

PasswordFileManager.constructor = function(pw, fs)
	passwordFile = new self.PasswordFile
	passwordFile.constructor(fs)
	self.file = passwordFile.file
	self.customCrypto = (new self.CustomCrypto).constructor()
	self.passwordList = self.parsePasswordFile(pw)
	self
	return self
end function

PasswordFileManager.parsePasswordFile = function(pw)
	content = self.file.get_content.split(NEW_LINE_OPERATOR)
	dcontent = []
	
	for line in content
		dcontent.push(self.customCrypto.decrypt(line, pw))
	end for
	
	arr = dcontent
	list = (new self.Collection).constructor(arr)
	iterator = (new self.Collection.Iterator).constructor()
	econstructor = self.PasswordEntry
	
	iterator.callback = function(item, index, c)
		return item != ""
	end function
	
	list = list.filter(iterator)
	
	iterator.callback = function(item, index, c)
		newItem = new econstructor
		newItem = newItem.createPasswordEntryFromColumn(item)
		return newItem
	end function
	
	list = list.map(iterator)
	
	return list
end function

PasswordFileManager.findPasswordIndexByKey = function(key)
	iterator = (new self.Collection.Iterator).constructor()
	
	iterator.callback = function(item, index, c)
		return item.key == key
	end function
	
	return self.passwordList.findIndex(iterator)
end function

PasswordFileManager.findPasswordByKey = function(key)
	index = self.findPasswordIndexByKey(key)
	if (index == null) then return null
	return self.passwordList.value()[index]
end function

PasswordFileManager.setPasswordByKey = function(passwordEntry)
	index = self.findPasswordIndexByKey(passwordEntry.key)
	spliced = self.passwordList.splice(index, 1, [passwordEntry])
	self.passwordList = spliced
	return self.passwordList
end function

PasswordFileManager.removePasswordByKey = function(passwordEntry)
	index = self.findPasswordIndexByKey(passwordEntry.key)
	spliced = self.passwordList.splice(index, 1, [])
	self.passwordList = spliced
	return self.passwordList
end function

PasswordFileManager.savePasswordFile = function(pw)
	iterator = (new self.Collection.Iterator).constructor()
	
	iterator.callback = function(item, index, c)
		return item.toString()
	end function
	
	transformed = self.passwordList.map(iterator)
	transformed = transformed.value()
	dcontent = []
	
	for line in transformed
		dcontent.push(self.customCrypto.encrypt(line, pw))
	end for
	
	content = dcontent.join(NEW_LINE_OPERATOR)
	self.file.set_content(content)
end function

module.exports = PasswordFileManager
