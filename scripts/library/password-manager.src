#import FS from fs;

PasswordEntry = {}

PasswordEntry.constructor = function(key, password)
	self.key = key
	self.password = password

	return self
end function

PasswordEntry.toString = function()
	return [self.key, self.password].join(";")
end function

PasswordEntry.createPasswordEntryFromColumn = function(columnString)
	parsed = columnString.split(";")
	return self.constructor(parsed[0], parsed[1])
end function

PasswordFile = {}

PasswordFile.getFilename = function()
	return "passwords"
end function

PasswordFile.load = function()
	passwordFileName = self.getFilename()
	passwordFile = self.computer.File(self.fullPath)

	if passwordFile == null then
		fs = new FS
		passwordFile = fs.createFile(computer, self.basePath, passwordFileName)
	end if

	self.file = passwordFile

	return passwordFile
end function

PasswordFile.constructor = function(computer)
	user = active_user
	directory = "/home"
	passwordFileName = self.getFilename()

	self.computer = computer
	self.basePath = [directory, user].join("/")
	self.fullPath = [directory, user, passwordFileName].join("/")

	self.load()

	return self
end function

PasswordFileManager = {}

PasswordFileManager.PasswordFile = PasswordFile
PasswordFileManager.PasswordEntry = PasswordEntry

PasswordFileManager.constructor = function(computer)
	passwordFile = new self.PasswordFile
	passwordFile.constructor(computer)
	self.file = passwordFile.file
	self.passwordList = self.parsePasswordFile()
	return self
end function

PasswordFileManager.parsePasswordFile = function()
	content = self.file.get_content
	list = content.split(NEW_LINE_OPERATOR)

	result = []
	index = 0
	maxIndex = list.len

	while index < maxIndex
		item = list[index]

		if item != "" then
			newItem = new self.PasswordEntry
			newItem = newItem.createPasswordEntryFromColumn(item)
			result.push(newItem)
		end if

		index = index + 1
	end while

	return result
end function

PasswordFileManager.findPasswordByKey = function(key)
	index = 0
	maxIndex = self.passwordList.len

	while index < maxIndex
		item = self.passwordList[index]
		if item.key == key then
			return item
		end if
		index = index + 1
	end while

	return null
end function

PasswordFileManager.findPasswordIndexByKey = function(key)
	index = 0
	maxIndex = self.passwordList.len

	while index < maxIndex
		item = self.passwordList[index]
		if item.key == key then
			return index
		end if
		index = index + 1
	end while

	return null
end function

PasswordFileManager.setPasswordByKey = function(passwordEntry)
	index = self.findPasswordIndexByKey(passwordEntry.key)
	max = self.passwordList.len

	if index == 0 then
		after = slice(self.passwordList, 1, max)
		self.passwordList = [passwordEntry] + after
		return [passwordEntry] + after
	else if (index == max - 1) then
		before = slice(self.passwordList, 0, max - 1)
		self.passwordList = before + [passwordEntry]
	else
		before = slice(self.passwordList, 0, index)
		after = slice(self.passwordList, index + 1, max)
		self.passwordList = before + [passwordEntry] + after
	end if

	return self.passwordList
end function

PasswordFileManager.removePasswordByKey = function(passwordEntry)
	index = self.findPasswordIndexByKey(passwordEntry.key)
	max = self.passwordList.len

	if index == 0 then
		self.passwordList = slice(self.passwordList, 1, max)
	else if (index == max - 1) then
		self.passwordList = slice(self.passwordList, 0, max - 1)
	else
		before = slice(self.passwordList, 0, index)
		after = slice(self.passwordList, index + 1, max)
		self.passwordList = before + after
	end if

	return self.passwordList
end function

PasswordFileManager.savePasswordFile = function()
	stringList = []
	index = 0
	maxIndex = self.passwordList.len

	while index < maxIndex
		item = self.passwordList[index]
		stringList.push(item.toString())
		index = index + 1
	end while

	content = stringList.join(NEW_LINE_OPERATOR)
	self.file.set_content(content)
end function

module.exports = PasswordFileManager
