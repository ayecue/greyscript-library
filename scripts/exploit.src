metaxploit = include_lib("/lib/metaxploit.so")

if not metaxploit then
	metaxploit = include_lib(current_path + "/metaxploit.so")
end if
if not metaxploit then (new Error).constructor("Cannot find metaxploit...").throw()

crypto = include_lib("/lib/crypto.so")

if not crypto then
	crypto = include_lib(current_path + "/crypto.so")
end if
if not crypto then (new Error).constructor("Cannot find crypto...").throw()

#import Argv from library/get-param;
#import Error from library/error;
#import MetaxploitCache from library/metaxploit-cache;

argDefinitions = []

argDefinitions.push((new Argv.Arg).constructor("h", "help", Argv.ArgType.FLAG, "Print help"))
argDefinitions.push((new Argv.Arg).constructor("n", "net", Argv.ArgType.FLAG, "Net mode"))
argDefinitions.push((new Argv.Arg).constructor("r", "refresh", Argv.ArgType.FLAG, "Refresh lib"))
argDefinitions.push((new Argv.Arg).constructor("a", "address", Argv.ArgType.VALUE, "Memory Adress"))
argDefinitions.push((new Argv.Arg).constructor("s", "unsec", Argv.ArgType.VALUE, "Unsec value"))
argDefinitions.push((new Argv.Arg).constructor("x", "xargs", Argv.ArgType.VALUE, "Extra Args"))

helpBlock = []

helpBlock.push("Exploit CLI")
helpBlock.push("Example: <b>exploit lib</b>")
helpBlock.push("")

for argDefinition in argDefinitions
	helpBlock.push(argDefinition.toString())
end for

help = helpBlock.join(NEW_LINE_OPERATOR)

argv = (new Argv).constructor(argDefinitions, help)

argv.parse()

if (argv.getWithKey("help") == true) then
	exit(help)
end if

target = argv.get(0, true)
isNetMode = argv.getWithKey("net")
shouldRefresh = argv.getWithKey("refresh")
selectedAddress = argv.getWithKey("address")
unsec = argv.getWithKey("unsec")
xargs = argv.getWithKey("xargs")

if (isNetMode) then
	print("Net mode")
	targetParts = target.split(":")
	ip = targetParts.pull()
	port = targetParts.pull()
	netsession = null
	if (port == null) then
		print("Connecting to router " + ip + "...")
		netsession = metaxploit.net_use(ip)
	else
		print("Connecting to " + ip + ":" + port + "...")
		netsession = metaxploit.net_use(ip, port.to_int)
	end if
	if not netsession then
		(new Error).constructor("NetSession to $0 failed...", [target]).throw()
	end if
	metalib = netsession.dump_lib
else
	metalib = metaxploit.load(target)
end if

print("Scanning " + metalib.lib_name + " v" + metalib.version + "...")
mxc = (new MetaxploitCache).constructor(metaxploit, get_shell.host_computer)
mareas = mxc.get(metalib, shouldRefresh)

attacks = {}

attacks.computer = {}
attacks.computer.passwd = function(v)
	file = v.File("/etc/passwd")
	
	if file == null then (new Error).constructor("Cannot find password file...").throw()
	if not file.has_permission("r") then (new Error).constructor("Error: can't read /etc/passwd. Permission denied.").throw()
	if file.is_binary then (new Error).constructor("Error: invalid /etc/passwd file found.").throw()
	
	list = file.get_content.split(NEW_LINE_OPERATOR)
	credList = []
	for item in list
		line = item.split(":")
		name = line.pull()
		password = line.pull()
		
		prompt = user_input("Found user " + name + " want to decipher password? (Y/n)")
		
		if (prompt == "Y") then
			password = crypto.decipher(password)
		end if
		
		output = [name, password].join(":")
		print(output)
		credList.push(output)
	end for
	
	return credList
end function

attacks.computer.scan = function(v)
	rfs = (new FS).constructor(v)
	
	items = rfs.getTree("/")
	
	if items.len == 0 then
		(new Error).constructor("Nothing found...").throw()
	end if
	
	for item in items
		print("Found " + item.path + "...")
	end for
end function

attacks.computer.read_file = function(v)
	path = user_input("Enter file path?")
	file = v.File(path)
	
	if file == null then (new Error).constructor("Cannot find $0...", [path]).throw()
	if not file.has_permission("r") then (new Error).constructor("Error: can't read $0. Permission denied.", [path]).throw()
	if file.is_binary then (new Error).constructor("Error: invalid $0 file found.", [path]).throw()
	
	print(file.get_content)
end function

attacks.computer.delete_file = function(v)
	path = user_input("Enter file path?")
	file = v.File(path)
	
	if file == null then (new Error).constructor("Cannot find $0...", [path]).throw()
	if not file.has_permission("r") then (new Error).constructor("Error: can't read $0. Permission denied.", [path]).throw()
	if file.is_binary then (new Error).constructor("Error: invalid $0 file found.", [path]).throw()
	
	file.delete
	if (v.File(path) == null) then
		print("Deleting file " + path + " was successful...")
	else
		print("Deleting file " + path + " failed...")
	end if
end function

attacks.computer.info = function(v)
	print("Local ip:" + v.local_ip)
	print("Public ip:" + v.public_ip)
	print(v.show_procs)
end function

attacks.computer.grab_creds = function(v)
	showFile = function (path)
		file = v.File(path)
		if (file == null) then
			print(path + " not found...")
		else
			print(file.get_content)
		end if
	end function
	homeFolder = v.File("/home")
	folders = homeFolder.get_folders
	for folder in folders
		print("<b>Bank file</b>")
		showFile(folder.path + "/Config/Bank.txt")
		
		print("<b>Mail file</b>")
		showFile(folder.path + "/Config/Mail.txt")
	end for
end function

attacks.file = {}
attacks.file.info = function(v)
	print("File: " + v.path)
	print("Name: " + v.name)
	print("Content: " + v.get_content)
end function

attacks.number = {}
attacks.number.info = function(v)
	print(v)
end function

attacks.shell = {}
attacks.shell.launch = function(v)
	programmPath = user_input("Enter programm path?")
	parameters = user_input("Enter parameters?")
	result = v.launch(programmPath, parameters)
	print(" Result: " + result)
end function

attacks.shell.start_shell = function(v)
	v.start_terminal()
end function

attacks.shell.grab_creds = function(v)
	list = attacks.computer.passwd(v.host_computer)
	master = null
	
	for item in list
		if (item.indexOf("root") == 0 and user_input("Want to grab em all? (Y/n)") == "Y") then
			master = item
			break
		end if
	end for
	
	shell = v
	if (master != null) then
		pw = master.split(":").pop()
		targetParts = target.split(":")
		ip = targetParts.pull()
		shell = get_shell.connect_service(ip, 22, "root", pw)
		
		if (shell == null) then
			(new Error).constructor("Error: shell creation failed root:$0", [pw]).throw()
		end if
	end if
	
	attacks.computer.grab_creds(shell.host_computer)
end function

launchOverflow = function(address, unsec, xargs)
	if (xargs == null) then
		return metalib.overflow(address, unsec)
	end if
	return metalib.overflow(address, unsec, xargs)
end function


getAttackSet = function(v, silent)
	type = typeof(v)
	
	if (not attacks.hasIndex(type)) then
		if (silent == true) then
			return {}
		end if
		(new Error).constructor("Error: no attacks for $0", [type]).throw()
	end if
	
	return attacks[type]
end function

selectAttack = function(v, set)
	attackName = user_input("Select attack:" + NEW_LINE_OPERATOR + set.indexes.join(NEW_LINE_OPERATOR) + NEW_LINE_OPERATOR + "...")
	
	if (not set.hasIndex(attackName)) then
		(new Error).constructor("Error: unknown attack $0", [attackName]).throw()
	end if
	
	set[attackName](v)
end function

if (selectedAddress == null) then
	for marea in mareas
		print("Found vulnerable address <b>" + marea + "</b>...")
		
		vuls = metaxploit.scan_address(metalib, marea)
		
		lines = vuls.split(NEW_LINE_OPERATOR)
		unsec = null
		conditions = []
		
		showAttack = function()
			commands = [target]
			
			if (isNetMode) then commands.push("--net")
			commands.push("--address")
			commands.push(marea)
			commands.push("--unsec")
			commands.push(unsec)
			commands.push("--xargs")
			commands.push("0")
			
			print("exploit " + commands.join(" "))
			for condition in conditions
				print("- " + condition)
			end for
			
			print("=" * 20)
			attacks = getAttackSet(launchOverflow(marea, unsec), true).indexes
			print("=" * 20)
			print("Possible attacks")
			print("> " + attacks.join(";"))
		end function
		
		for line in lines
			if (line.indexOf("Unsafe check") == 0) then
				if (unsec != null) then 
					showAttack()
					conditions = []
				end if
				start = line.indexOf(">")
				last = line.indexOf("<", start)
				unsec = line[start + 1:last]
			else if (line.indexOf("* ") == 0) then
				conditions.push(line[2:])
			end if
		end for
		
		showAttack()
	end for
	
	exit("Run exploit against address...")
end if

result = launchOverflow(selectedAddress, unsec, xargs)
selectAttack(result, getAttackSet(result))

